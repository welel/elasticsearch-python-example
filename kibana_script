# Elasticsearch — это документо-ориентированная система управления
# базами данных, которая обеспечивает быстрый поиск, фильтрацию
# и сортировку данных. Она использует JSON-формат для хранения
# документов и предоставляет мощные возможности для полнотекстового
# поиска и аналитики данных в режиме близком к реальному времени.

# Запросы и ответы к Elasticsearch осуществляются по RESTful API.
# Для операций с данными, настройки и управления кластером,
# используются стандартные HTTP запросы. Elasticsearch возвращает
# ответы в формате JSON. В ответе содержится информация о статусе
# выполнения запроса, а также запрошенные данные или подробное
# описание ошибки, если запрос не был выполнен успешно.




# * Вывод списка индексов.

# GET /_cat/indices/<index_name (optional)>/

# Индексы начинающиеся с точки создаются автоматически системой.
# В отчёте удобно смотреть наличие индексов и занимаемый ими размер на диске,
# или просто проверять, что соединение с Эластиком установлено.

GET /_cat/indices



# * Создание индекса.

# PUT /<index_name>
# {<body>}

# В setting указывается количество шардов и реплик,
# по умолчанию создается 1 шард и 1 реплика.
# Если в кластере всего одна машина с одной нодой
# Эластика, то создавать реплики нет смысла,
# так как Эластик всё равно не создаст их на одной ноде.
# Создание множества шардов не повлияет на производительность.
# Подробнее об этом: https://stackoverflow.com/questions/57136550/what-is-difference-b-w-modifying-and-updating-in-the-elasticsearch
#
# Параметр properties задает структуру документа -
# названия полей, их типы и другие настройки.
#
# ElasticSerach имеет большое количество различных типов,
# включая все основные базовые типы. Мы дальше заострим внимаени
# только на нескольких типах.
# Документация о типах: https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html
#
# Если попытаться создать уже существующий индекс,
# то возникнет ошибка.

PUT /user
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 0
  },
  "mappings": {
    "properties": {
      "name": {
        "type": "text"
      },
      "age": {
        "type": "integer"
      },
      "created_at": {
        "type": "date"
      }
    }
  }
}



# * Вывод информации об индексе

# GET /<index_name> - общая информация
# GET /user/_mapping - структура документа
# GET /user/_stats - общирная информация (есть размер индекса)

GET /user
GET /user/_mapping
GET /user/_stats



# * Добавление документа в индекс

# POST /<index_name>/_doc/<doc_id (optional)>
# {<doc>}

# В ответе видим _version - версия документа, инкрементится при обновлении.
# result - название операции, которая была произведена с документом.
# При первом добавлении в result выводится created.
# Если мы выполним запрос второй раз, то увеличится значение _version на 1,
# и result будет updated.
#
# Таким образом понимаем, что данный запрос не только добавляет новый документ,
# но также и обновляет его. Но для обновления необходимо передать полный
# документ (со всеми полями).
#
# В Эластике есть операции create (создание документа, если нет в индексе,
# иначе ошибка); update (обновление документа, если он в индексе, иначе ошибка),
# index (выбор между create и update в зависимости от наличия документа в индексе).
# В Python названия операций соотвествуют названиям методов.

POST /user/_doc/1
{
  "name": "John Doe",
  "age": 30,
  "created_at": "2000-01-01T00:00:00"
}



# * Добавление множества докуметов

# POST /<index_name>/_bulk
# {<meta>}
# {<doc>}
# ...

# В _bulk можно передать набор различных операций:
# create, update, index и т.д.
 
# - название операции; можем менять

POST /user/_bulk
{ "index" : { "_index" : "user", "_id" : "1" } }
{ "name" : "Kale Smith", "age" : 19, "created_at" : "2022-01-01T00:00:00" }
{ "index" : { "_index" : "user", "_id" : "2" } }
{ "name" : "John Blake", "age" : 25, "created_at" : "2022-02-01T00:00:00" }
{ "index" : { "_index" : "user", "_id" : "3" } }
{ "name" : "Raul Perez", "age" : 31, "created_at" : "2022-03-01T00:00:00" }
{ "index" : { "_index" : "user", "_id" : "4" } }
{ "name" : "Tony Walker", "age" : 44, "created_at" : "2022-04-01T00:00:00" }
{ "index" : { "_index" : "user", "_id" : "5" } }
{ "name" : "Justin Blake", "age" : 59, "created_at" : "2022-05-01T00:00:00" }



# * Динамическое создание индекса

# Если добавить документ в несуществующий индекс, то он
# автоматически создатся, и подгонит структуру под
# переданный документ.

POST /clients/_doc/1
{
  "name": "John Smith",
  "age": 19,
  "created_at": "2000-01-01T00:00:00"
}

GET /_cat/indices
GET /clients



# * Динамическая структура индекса

# Если в документе указать несуществующие поля,
# то они автоматически добавятся в структуру документа
# индекса.

POST /clients/_doc/1
{
  "name": "John Smith",
  "age": 19,
  "created_at": "2000-01-01T00:00:00",
  "location": "London"
}

GET /clients/_mapping

# Динамическое изменение индекса может быть неприятным,
# если мы при индексации не сильно обращаем внимание
# на валидацию передаваемых данных.
# Для того, чтобы отключить динамическое изменение,
# необходимо в настройки mapping добавить "dynamic": false
# при создании индекса. При dynamic false несуществующие
# поля буду игнорироваться.

PUT /clients
{
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas": 0
  },
  "mappings": {
    "dynamic": false,
    "properties": {
      "name": {
        "type": "text"
      }
    }
  }
}



# * Удаление индекса

# DELETE /<index_name>

DELETE /clients



# * Обновление документа

# POST /<index_name>/_update/<doc_id>
# {<body>}

# Не обязательно передавать весь документ. Если документа
# нет в индексе, то ошибка 404.
# Если документ не был изменен, потому что поле и так равно,
# передаваемому значению, то в result будет "noop" - no operation.

POST /user/_update/1
{
  "doc": {
    "age": 50,
    "name": "Kale Smith"
  }
}



# * Удаление документа

# DELETE /<index_name>/_doc/<doc_id>

# Счётчик версии закреплен за _id.

DELETE /user/_doc/3



# * Запрос документа по id

# GET /<index_name>/_doc/<doc_id>

# Чтобы избавиться от оверхеда, можно воспользоваться
# параметрами _source.

GET /user/_doc/1
GET /user/_doc/1/_source
GET /user/_doc/1/_source/?_source=name



# ** Поиск

# GET /<index_name>/_search
# {<body (optional)>}

# Все запросы поиска
# будут отдавать максимум 10000. Но есть техники пагинации
# и сроллинга, которые позволяют получить больше, используя
# несколько запросов. Это понадобится, если необходимо
# сделать выгрузку данных, например, более 10000.
# Статья об этом: https://opster.com/guides/elasticsearch/how-tos/elasticsearch-pagination-techniques/

# took - время в мс затраченное на поиск данных на стороне
# движка Эластика, оно не включает сериализацию, десериализацию,
# передачу по сети. По ней удобно отслеживать perfomance запроса.



# * Вывод всех документов индекса


GET /user/_search


# * offset, limit

GET /user/_search
{
  "from": 1,
  "size": 2
}


# * Поиск по числам (больше, меньше, и т.д)

# filter тут является списком, поэтому через запятую можем добавить
# ranges на другие поля.
#
# bool объединяет в одну логическую единицу запросы.
# Виды запросов: must, filter, should, and must_not.

GET /user/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "age": {
              "gte": 20,
              "lte": 40
            }
          }
        }
      ]
    }
  }
}



# * Поиск по значению

# Для равенства используется слово term, если нам надо найти
# поле, которое равно чему-то конкретному, то используем его.

GET /user/_search
{
  "query": {
    "term": {
      "age": 44
    }
  }
}



# * Полнотекстый поиск

# match - предназначен для полнотекстного поиска. Ищет строки
# похожие на переданное значение.

GET /user/_search
{
  "query": {
    "match": {
      "name": "blake"
    }
  }
}

# Если передадим полное имя, второй Justin Blake всё равно
# останется в результате. Потому что он подходит по слову Blake.
# У документов есть _score значение, которое отражает насколько
# документ подходит под запрос.

GET /user/_search
{
  "query": {
    "match": {
      "name": "John Blake"
    }
  }
}

# А как найти только John Blake? Если воспользуемся оператором
# term, то ничего не найдём.

GET /user/_search
{
  "query": {
    "term": {
      "name": "John Blake"
    }
  }
}

# Дело в том, что у поля name тип text, а тип text подходит
# для полнотекстного поиска, но не для точного сравнения.
# Также он не подходит для сортировки.
# Чтобы выполнять точное сравнение по полю name, необходимо
# в name добавить подтип keyword.

GET /user/_mapping

DELETE /user

PUT /user
{
  "settings": {
    "number_of_shards": 2,
    "number_of_replicas": 0
  },
  "mappings": {
    "properties": {
      "name": {
        "type": "text",
        "fields": {
          "keyword": {
            "type": "keyword"
          }
        }
      },
      "age": {
        "type": "integer"
      },
      "created_at": {
        "type": "date"
      }
    }
  }
}

# Теперь можем выполнять поиск по полному совпадению, используя
# созданный подтип, указывая его через точку после имени поля.

GET /user/_search
{
  "query": {
    "term": {
      "name.keyword": "John Blake"
    }
  }
}

# Подрезюмируем: text - для полей по которым будет выполняться
# полнотекстый поиск. keyword - для полей по которым выполняется
# полное сравнение или сортировка. Но если необходимы оба варианта,
# то создаем необходимый подтип.



# * filter

# filter предназначен для отбрасывания документов по заданым
# значениям. При этом filter не тратит ресурсы на скоринг
# документов, поэтому запросы через filter выполняются быстрее.
# Заметьте, что предыдущий запрос считает _score, а этот нет.

GET /user/_search
{
  "query": {
    "bool": {
      "filter": {
        "term": {
          "name.keyword": "John Blake"
        }
      }
    }
  }
}

# В filter работают запросы range и term. Выше один запрос в
# filter, поэтому он в фигурных скобках. Если необходимо сделать
# несколько фильтров, то следует filter делать списком (квадратные
# скобки) и каждый запрос подзапрос обрамлять в фигурные.
# Это касается filter и далее рассматриваемых групп.

GET /user/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "name.keyword": "John Blake"
          }
        },
        {
          "range": {
            "age": {
              "lt": 26
            }
          }
        }
      ]
    }
  }
}



# * must

# must - работает точно также, как и filter, только при этом,
# в must производится скоринг документов. Таким образом, must
# хорошо годится для match (запросов полнотекстного поиска),
# где хотелось бы получить самые подходящие документы под запрос.

GET /user/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "name": "Blake"
          }
        }
      ]
    }
  }
}




# * must_not

# Рабоатет как filter, только исключает документы, подходящие под
# запрос, вместо того, чтобы включать.

GET /user/_search
{
  "query": {
    "bool": {
      "must_not": [
        {
          "match": {
            "name": "Blake"
          }
        }
      ]
    }
  }
}



# * should

# Если необходимо найти всех пользователей с именем Blake или Kale,
# то обычный must запрос не поможет. Потому что must работает,
# как оператор логического И. Для логического ИЛИ используем should.


# name == Blake && name == Kale
GET /user/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "name": "Blake"
          }
        },
        {
          "match": {
            "name": "Kale"
          }
        }
      ]
    }
  }
}

# name == Blake || name == Kale
GET /user/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "name": "Blake"
          }
        },
        {
          "match": {
            "name": "Kale"
          }
        }
      ]
    }
  }
}



# * Составной запрос

# Запросы в Эластике могут быть очень сложными, изложенное выше
# не описывает и 5% процентов всех возможностей. Чтобы лучше
# разобраться в запросах, надо читать документацию.
# Рассмотрим простой составной запрос. Видим, что у нас могут
# быть вложенные bool, использоваться блоки must, filter, should
# и другие в одном запросе.

# name == "Blake" && (age == 19 || age == 59) && (age >= 18 && age <= 100)

GET /user/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "name": "Blake"
          }
        },
        {
          "bool": {
            "should": [
              {
                "term": {
                  "age": 19
                }
              },
              {
                "term": {
                  "age": 59
                }
              }
            ]
          }
        }
      ],
      "filter": [
        {
          "range": {
            "age": {
              "gte": 18,
              "lte": 100
            }
          }
        }
      ]
    }
  }
}



# * Запрос конкретных полей

# Если не нужен весь документ, можно убрать оверхед и получать
# только те поля, которые необходимы, используя _source.

GET /user/_search
{
  "_source": ["name", "age"], 
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "name": "Blake"
          }
        },
        {
          "match": {
            "name": "Kale"
          }
        }
      ]
    }
  }
}



# * Сортировка документов

GET /user/_search
{
  "_source": ["age"],
  "sort": [
    {
      "age": {
        "order": "desc"
      }
    }
  ]
}

# Сортировка по 2 полям одновременно. Заметьте, что для поля name
# используется подтип keyword, а не просто name, так как при попытке
# отсортировать по полю с типом text возникнет ошибка.

GET /user/_search
{
  "sort": [
    {
      "age": {
        "order": "asc"
      }
    },
    {
      "name.keyword": {
        "order": "asc"
      }
    }
  ]
}

# Про сортировку по тексту: https://opster.com/guides/elasticsearch/search-apis/optimizing-elasticsearch-sort-by-text-field/



# * Анализаторы

# Ещё одной большой темой является анализаторы текста. 
# Неполохой источник для начального понимания из работы:
# https://mallikarjuna91.medium.com/what-is-tokenizer-analyzer-and-filter-in-elasticsearch-317d4ec69ecc

# ChatGPT по ElasticSearch: https://checkups.opster.com/ops-gpt
# Хорошо отвечает на вопросы об Эластике, быстрее, чем искать
# в документации.

# Документация: https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-intro.html
